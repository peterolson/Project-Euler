{
  "name": "big-rational",
  "version": "0.9.8",
  "author": {
    "name": "Peter Olson",
    "email": "peter.e.c.olson+npm@gmail.com"
  },
  "description": "An arbitrary length rational number library for Javascript",
  "contributors": [],
  "bin": {},
  "scripts": {},
  "main": "./BigRational",
  "repository": {
    "type": "git",
    "url": "git@github.com:peterolson/BigRational.js.git"
  },
  "keywords": [
    "math",
    "big",
    "bignum",
    "bignumber",
    "bigrational",
    "rational",
    "arbitrary",
    "precision",
    "arithmetic"
  ],
  "dependencies": {
    "big-integer": "1.3.x"
  },
  "license": "WTFPL",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "ï»¿BigRational.js\r\n=========\r\n\r\n**BigRational.js** is an arbitrary-length rational number library for Javascript, allowing arithmetic operations on rational numbers of unlimited size, notwithstanding memory and time limitations.\r\n\r\nA *rational number* is stored internally as a pair of two big integers. Because of this, BigRational.js depends on my big integer library, [BigInteger.js](https://github.com/peterolson/BigInteger.js).\r\n\r\nInstallation\r\n---\r\nIf you are using a browser, you can download [BigRational.js from GitHub](http://peterolson.github.com/BigRational.js/BigInt_BigRat.min.js) or just hotlink to it.\r\n\r\n    <script src=\"http://peterolson.github.com/BigRational.js/BigInt_BigRat.min.js\"></script>\r\n\r\nThis will include both the `bigInt` library and the `bigRat` library. If you want to reference them separately, you can use the [non-combined BigRational.js script](http://peterolson.github.com/BigRational.js/BigRational.min.js).\r\n\r\nIf you are using node, you can install BigRational.js with [npm](https://npmjs.org/).\r\n\r\n    npm install big-rational\r\n\r\nThen you can include it in your code\r\n\r\n    var bigRat = require(\"big-rational\");\r\n\r\n`bigRat(num?, denom?)`\r\n---\r\nYou can create a bigRational by calling the `bigRat` function. You can pass in up to two paramers.\r\n\r\n**`bigRat()`**\r\n\r\nIf you pass in zero parameters, it will return zero.\r\n\r\n**`bigRat(n)`**\r\n\r\nIf you pass in one parameter, it must be one of the following:\r\n\r\n - a string, which may be\r\n   - an integer, such as `\"12345\"`,\r\n   - a numerator over a denominator, such as `\"2/3\"`,\r\n   - a mixed fraction, such as `\"1_1/2\"`\r\n   - a decimal number, such as `\"54.05446\"`\r\n - a Javascript number\r\n - a bigInteger\r\n - a bigRational\r\n\r\n**`bigRat(num, denom)`**\r\n\r\nIf you pass in two parameters, the first will be interpreted as the numerator, and the second as the denominator. Both parameters must be one of the following: \r\n\r\n - a string in integer form, such as `\"12345\"`\r\n - a JavaScript number that is an integer, such as `12345`\r\n - a bigInteger\r\n\r\n**Examples:**\r\n\r\n    var zero = bigRat();\r\n    var threeFourths = bigRat(\"3/4\")    ||\r\n                       bigRat(\"3\", \"4\") ||\r\n                       bigRat(3, 4)     ||\r\n                       bigRat(3 / 4)    ||\r\n                       bigRat(0.75);\r\n    var fiveHalves =   bigRat(\"5/2\") ||\r\n                       bigRat(\"2_1/2\");\r\n\r\nMethod Chaining\r\n---\r\nNote that bigRat operations return bigRats, which allows you to chain methods, for example:\r\n\r\n    var salary = bigRat(dollarsPerHour).times(hoursWorked).plus(randomBonuses)\r\n\r\nConstants\r\n---\r\n\r\nThere are three constants already stored that you do not have to construct with the `bigRat` function yourself:\r\n\r\n - `bigRat.one`, equivalent to `bigRat(1)`\r\n - `bigRat.zero`, equivalent to `bigRat(0)`\r\n - `bigRat.minusOne`, equivalent to `bigRat(-1)`\r\n\r\nProperties\r\n===\r\n\r\nYou can obtain the numerator and denominator of a bigRational with these properties:\r\n\r\n`numerator`\r\n---\r\nReturns the numerator of a bigRational. This will be a bigInt.\r\n\r\n - `bigRat(34, 3).numerator` => `bigInt(34)`\r\n\r\n`denominator`\r\n---\r\nReturns the denominator of a bigRational. This will be a bigIn.t\r\n\r\n - `bigRat(34, 3).denominator` => `bigInt(3)`\r\n\r\n`num`\r\n---\r\nAlias for the `numerator` property\r\n\r\n`denom`\r\n---\r\nAlias for the `denominator` property\r\n\r\nMethods\r\n===\r\n\r\n`abs`\r\n---\r\nReturns the absolute value of a number.\r\n\r\n - `bigRat(-424).abs().equals(424)`\r\n\r\n`add`\r\n---\r\nPerforms addition.\r\n\r\n - `bigRat(\"1/3\").add(1, 3).equals(2, 3)`\r\n\r\n`ceil(toBigInt?)`\r\n---\r\nRounds up to the nearest integer. If the `toBigInt` argument is `true`, then it will return a bigInteger instead of a bigRational.\r\n\r\n - `bigRat(12345.4).ceil().equals(12346)`\r\n\r\n`compare`\r\n---\r\nPerforms a comparison between two numbers. If the numbers are equal, it returns `0`. If the first number is greater, it returns `1`. If the first number is lesser, it returns `-1`.\r\n\r\n - `bigRat(3).compare(3) === 0`\r\n - `bigRat(3).compare(4) === -1`\r\n - `bigRat(4).compare(3) === 1`\r\n\r\n`divide`\r\n---\r\nPerforms division.\r\n\r\n - `bigRat(\"354.25\").divide(1, 4).equals(1417)`\r\n\r\n`equals`\r\n---\r\nChecks if two numbers are equal.\r\n\r\n - `bigRat(1).equals(1)`\r\n\r\n`floor(toBigInt?)`\r\n---\r\nRounds down to the nearest integer. If the `toBigInt` argument is `true`, then it will return a bigInteger instead of a bigRational.\r\n\r\n - `bigRat(987.99999).floor().equals(987)`\r\n\r\n`greater`\r\n---\r\nChecks if the first number is greater than the second\r\n\r\n - `bigRat(5).greater(4)`\r\n\r\n`greaterOrEquals`\r\n---\r\nChecks if the first number is greater than or equal to the second\r\n\r\n - `bigRat(5).greaterOrEquals(5)`\r\n - `bigRat(5).greaterOrEquals(4)`\r\n\r\n`isNegative`\r\n---\r\nReturns `true` if the number is negative, `false` otherwise.\r\n\r\n - `bigRat(-7).isNegative()`\r\n\r\n`isPositive`\r\n---\r\nReturns `true` if the number is positive, `false` otherwise.\r\n\r\n - `bigRat(7).isPositive()`\r\n\r\n`isZero`\r\n---\r\nReturns `true` if the number equals 0, `false` otherwise.\r\n\r\n - `bigRat(0).isZero()`\r\n\r\n`lesser`\r\n---\r\nChecks if the first number is lesser than the second\r\n\r\n - `bigRat(4).lesser(5)`\r\n\r\n`lesserOrEquals`\r\n---\r\nChecks if the first number is lesser than or equal to the second\r\n\r\n - `bigRat(4).lesserOrEquals(4)`\r\n - `bigRat(4).lesserOrEquals(5)`\r\n\r\n`minus`\r\n---\r\nAlias for `subtract`.\r\n\r\n`mod`\r\n---\r\nPerforms the modulo operation.\r\n\r\n - `bigRat(3).mod(2).equals(1)`\r\n\r\n`multiply`\r\n---\r\nPerforms multiplication.\r\n\r\n - `bigRat(70, 2).multiply(4).equals(140)`\r\n\r\n`negate`\r\n---\r\nReturns the negation of a number.\r\n\r\n - `bigRat(234).negate().equals(-234)`\r\n\r\n`notEquals`\r\n---\r\nChecks if two numbers are not equal.\r\n\r\n - `bigRat(1).notEquals(2)`\r\n\r\n`over`\r\n---\r\nAlias for `divide`.\r\n\r\n`plus`\r\n---\r\nAlias for `add`.\r\n\r\n`round(toBigInt?)`\r\n---\r\nRounds a number to the nearest integer. If the number is exactly half-way between two integers, it will round up.\r\nIf the `toBigInt` argument is `true`, then it will return a bigInteger instead of a bigRational.\r\n\r\n - bigRat(54345.12566).round().equals(54345)\r\n - bigRat(1234567.5).round().equals(1234568)\r\n - bigRat(69.8).round().equals(70)\r\n\r\n`subtract`\r\n---\r\nPerforms subtraction.\r\n\r\n - `bigRat(3).subtract(2).equals(1)\r\n\r\n`times`\r\n---\r\nAlias for `multiply`.\r\n\r\n`toDecimal(digits?)`\r\n---\r\nConverts a bigRational to a string in decimal notation, cut off after the number of digits specified in the `digits` argument. The default number of digits is 10.\r\n\r\n - `bigRat(1,3).toDecimal() === \"0.33333333333\"`\r\n - `bigRat(1,7).toDecimal(14) === \"0.142857142857143\"`\r\n\r\nOverride Methods\r\n===\r\n\r\n`toString()`\r\n---\r\nConverts a bigRat to a string in \"numerator/denominator\" notation.\r\n\r\n - `bigRat(145.545).toString() === \"29109/200\"`\r\n\r\n`valueOf()`\r\n---\r\nConverts a bigRat to a native Javascript number. This override allows you to use native arithmetic operators without explicit conversion:\r\n\r\n - `bigRat(1, 4) + bigRat(3, 4) === 1`",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/peterolson/BigRational.js/issues"
  },
  "homepage": "https://github.com/peterolson/BigRational.js",
  "_id": "big-rational@0.9.8",
  "_from": "big-rational@"
}
